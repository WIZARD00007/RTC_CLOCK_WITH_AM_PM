#include <LEDMatrixDriver.hpp>
#include <Wire.h>
#include <RtcDS1307.h>



RtcDS1307<TwoWire> Rtc(Wire);
const uint8_t LEDMATRIX_CS_PIN = 10;

const int LEDMATRIX_SEGMENTS = 4;
const int LEDMATRIX_WIDTH    = LEDMATRIX_SEGMENTS * 8;

LEDMatrixDriver lmd(LEDMATRIX_SEGMENTS, LEDMATRIX_CS_PIN);

const int ANIM_DELAY = 60;

void setup() {
      Serial.begin(57600);

    Serial.print("compiled: ");
    Serial.print(__DATE__);
    Serial.println(__TIME__);

        Rtc.Begin();

    RtcDateTime compiled = RtcDateTime(__DATE__, __TIME__);
    printDateTime(compiled);
    Serial.println();

    if (!Rtc.IsDateTimeValid())
    {
        if (Rtc.LastError() != 0)
        {
            Serial.print("RTC communications error = ");
            Serial.println(Rtc.LastError());
        }
        else
        {
            Serial.println("RTC lost confidence in the DateTime!");
            Rtc.SetDateTime(compiled);
        }
    }

    if (!Rtc.GetIsRunning())
    {
        Serial.println("RTC was not actively running, starting now");
        Rtc.SetIsRunning(true);
    }

    RtcDateTime now = Rtc.GetDateTime();
    if (now < compiled)
    {
        Serial.println("RTC is older than compile time!  (Updating DateTime)");
        Rtc.SetDateTime(compiled);
    }
    else if (now > compiled)
    {
        Serial.println("RTC is newer than compile time. (this is expected)");
    }
    else if (now == compiled)
    {
        Serial.println("RTC is the same as compile time! (not expected but all is fine)");
    }

    // never assume the Rtc was last configured by you, so
    // just clear them to your needed state
    Rtc.SetSquareWavePin(DS1307SquareWaveOut_Low);



  lmd.setEnabled(true);
  lmd.setIntensity(2);   // 0 = low, 10 = high
}

int x=0, y=0;   // start top left

const byte MAX7219_Dot_Matrix_font [95] [8]= {
{0,0,0,0,0,0,0,0}, // SPACE
{0x10,0x18,0x18,0x18,0x18,0x00,0x18,0x18}, // EXCL
{0x28,0x28,0x08,0x00,0x00,0x00,0x00,0x00}, // QUOT
{0x00,0x0a,0x7f,0x14,0x28,0xfe,0x50,0x00}, // #
{0x10,0x38,0x54,0x70,0x1c,0x54,0x38,0x10}, // $
{0x00,0x60,0x66,0x08,0x10,0x66,0x06,0x00}, // %
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // &
{0x00,0x10,0x18,0x18,0x08,0x00,0x00,0x00}, // '
{0x02,0x04,0x08,0x08,0x08,0x08,0x08,0x04}, // (
{0x40,0x20,0x10,0x10,0x10,0x10,0x10,0x20}, // )
{0x00,0x10,0x54,0x38,0x10,0x38,0x54,0x10}, // *
{0x00,0x08,0x08,0x08,0x7f,0x08,0x08,0x08}, // +
{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x08}, // COMMA
{0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00}, // -
{0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06}, // DOT
{0x00,0x04,0x04,0x08,0x10,0x20,0x40,0x40}, // /
{0x00,0x38,0x44,0x4c,0x54,0x64,0x44,0x38}, // 0
{0x04,0x0c,0x14,0x24,0x04,0x04,0x04,0x04}, // 1
{0x00,0x30,0x48,0x04,0x04,0x38,0x40,0x7c}, // 2
{0x00,0x38,0x04,0x04,0x18,0x04,0x44,0x38}, // 3
{0x00,0x04,0x0c,0x14,0x24,0x7e,0x04,0x04}, // 4
{0x00,0x7c,0x40,0x40,0x78,0x04,0x04,0x38}, // 5
{0x00,0x38,0x40,0x40,0x78,0x44,0x44,0x38}, // 6
{0x00,0x7c,0x04,0x04,0x08,0x08,0x10,0x10}, // 7
{0x00,0x3c,0x44,0x44,0x38,0x44,0x44,0x78}, // 8
{0x00,0x38,0x44,0x44,0x3c,0x04,0x04,0x78}, // 9
{0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00}, // :
{0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x08}, // ;
{0x00,0x10,0x20,0x40,0x80,0x40,0x20,0x10}, // <
{0x00,0x00,0x7e,0x00,0x00,0xfc,0x00,0x00}, // =
{0x00,0x08,0x04,0x02,0x01,0x02,0x04,0x08}, // >
{0x00,0x38,0x44,0x04,0x08,0x10,0x00,0x10}, // ?
{0x00,0x30,0x48,0xba,0xba,0x84,0x78,0x00}, // @
{0x00,0x1c,0x22,0x42,0x42,0x7e,0x42,0x42}, // A
{0x00,0x78,0x44,0x44,0x78,0x44,0x44,0x7c}, // B
{0x00,0x3c,0x44,0x40,0x40,0x40,0x44,0x7c}, // C
{0x00,0x7c,0x42,0x42,0x42,0x42,0x44,0x78}, // D
{0x00,0x78,0x40,0x40,0x70,0x40,0x40,0x7c}, // E
{0x00,0x7c,0x40,0x40,0x78,0x40,0x40,0x40}, // F
{0x00,0x3c,0x40,0x40,0x5c,0x44,0x44,0x78}, // G
{0x00,0x42,0x42,0x42,0x7e,0x42,0x42,0x42}, // H
{0x00,0x7c,0x10,0x10,0x10,0x10,0x10,0x7e}, // I
{0x00,0x7e,0x02,0x02,0x02,0x02,0x04,0x38}, // J
{0x00,0x44,0x48,0x50,0x60,0x50,0x48,0x44}, // K
{0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x7c}, // L
{0x00,0x82,0xc6,0xaa,0x92,0x82,0x82,0x82}, // M
{0x00,0x42,0x42,0x62,0x52,0x4a,0x46,0x42}, // N
{0x00,0x3c,0x42,0x42,0x42,0x42,0x44,0x38}, // O
{0x00,0x78,0x44,0x44,0x48,0x70,0x40,0x40}, // P
{0x00,0x3c,0x42,0x42,0x52,0x4a,0x44,0x3a}, // Q
{0x00,0x78,0x44,0x44,0x78,0x50,0x48,0x44}, // R
{0x00,0x38,0x40,0x40,0x38,0x04,0x04,0x78}, // S
{0x00,0x7e,0x90,0x10,0x10,0x10,0x10,0x10}, // T
{0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x3e}, // U
{0x00,0x42,0x42,0x42,0x42,0x44,0x28,0x10}, // V
{0x80,0x82,0x82,0x92,0x92,0x92,0x94,0x78}, // W
{0x00,0x42,0x42,0x24,0x18,0x24,0x42,0x42}, // X
{0x00,0x44,0x44,0x28,0x10,0x10,0x10,0x10}, // Y
{0x00,0x7c,0x04,0x08,0x7c,0x20,0x40,0xfe}, // Z
{ 0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00 }, // '['
{ 0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00 }, // backslash
{ 0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00 }, // ']'
{ 0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00 }, // '^'
{ 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 }, // '_'
{ 0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00 }, // '`'
{0x00,0x70,0x08,0x08,0x78,0x48,0x48,0x7c}, // 'a'
{0x00,0x40,0x40,0x40,0x78,0x44,0x44,0x78},//b
{0x00,0x3c,0x40,0x40,0x40,0x40,0x3c,0x00},//c
{0x00,0x04,0x04,0x04,0x3c,0x44,0x44,0x3c},//d
{0x00,0x38,0x44,0x64,0x5c,0x40,0x42,0x3c},//e
{0x00,0x18,0x20,0x20,0x70,0x20,0x20,0x20},//f
{0x00,0x70,0x48,0x48,0x38,0x08,0x48,0x38},//g
{0x00,0x40,0x40,0x40,0x70,0x50,0x50,0x50},//h
{0x00,0x10,0x00,0x10,0x10,0x10,0x10,0x10},//i
{0x00,0x10,0x00,0x10,0x10,0x10,0x50,0x30},//j
{0x00,0x40,0x40,0x48,0x50,0x60,0x50,0x48},//k
{0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x68},//l
{0x00,0x00,0x40,0x36,0x2a,0x2a,0x2a,0x2a},//m
{0x00,0x00,0x40,0x3c,0x24,0x24,0x24,0x24},//n
{0x00,0x00,0x38,0x44,0x44,0x44,0x38,0x00},//o
{0x00,0xb0,0x48,0x48,0x70,0x40,0x40,0x40},//p
{0x00,0x32,0x4c,0x4c,0x34,0x04,0x04,0x04},//q
{0x00,0x08,0x50,0x30,0x20,0x20,0x20,0x20},//r
{0x00,0x38,0x44,0x40,0x38,0x04,0x44,0x38},//s
{0x00,0x20,0x20,0x70,0x20,0x20,0x20,0x18},//t
{0x00,0x00,0x48,0x48,0x48,0x48,0x3c,0x00},//u
{0x00,0x00,0x44,0x44,0x44,0x44,0x28,0x10},//v
{0x00,0x00,0x00,0x44,0x44,0x54,0x28,0x00},//w
{0x00,0x00,0x42,0x24,0x18,0x18,0x24,0x42},//x
{0x00,0x48,0x28,0x18,0x08,0x08,0x28,0x18},//y
{0x00,0x00,0x78,0x10,0x20,0x40,0x78,0x00},
{ 0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00 }, // '|'
{ 0x41, 0x41, 0x77, 0x3E, 0x08, 0x08, 0x00, 0x00 }, // '}'
{ 0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00 }, // '~'
};  //  end of MAX7219_Dot_Matrix_font

RtcDateTime time_to_update;
int count=0;


void loop()
{
  count++;
  Serial.println(count);
  if(count > 20)
  {
    count = 0;
    RtcDateTime now = Rtc.GetDateTime();
    time_to_update = now;
  }
  printDateTime(time_to_update);
}


void drawString(char* text, int len, int x, int y )
{
  for( int idx = 0; idx < len; idx ++ )
  {
    char c = text[idx];// - 32;
    if((c >= ' ') && (c <= 126))
    {
      c = c - ' ';
        if( x + idx * 8  > LEDMATRIX_WIDTH )
      return;

    if( 8 + x + idx * 8 > 0 )
    {
      drawLetter( MAX7219_Dot_Matrix_font[c], x + idx * 8, y, 8, 8 );
    }


    }
  }
}

void drawLetter( byte* Letter ,int x, int y, int width, int height )
{
  byte mask = B10000000;

  for( int iy = 0; iy < height; iy++ )
  {
    for( int ix = 0; ix < width; ix++ )
    {
      lmd.setPixel(x + ix, y + iy, (bool)(Letter[iy] & mask ));
      mask = mask >> 1;
    }
    mask = B10000000;
  }
}


#define countof(a) (sizeof(a) / sizeof(a[0]))


void printDateTime(const RtcDateTime& dt)
{
char ki;
char ty,tz;
char datestring[40];
if(dt.Hour()>12)
{
   ki=dt.Hour()-12;
    ty='P';
    tz='M';

}
else
{
  ki=dt.Hour();
   ty='A';
   tz='M';
}


    snprintf_P(datestring,
            countof(datestring),
              PSTR( "%02u:%02u:%02u %02u:%02u:%02u %c%c"),

           dt.Day(),
            dt.Month(),
          dt.Year(),
           ki,
            dt.Minute(),
            dt.Second(),
            ty,
            tz

             );

              int len = strlen(datestring);
  drawString(datestring, len, x, 0);
  lmd.display();
  if( --x < len * -8) {
    x = LEDMATRIX_WIDTH;
  }

  delay(ANIM_DELAY);
}
